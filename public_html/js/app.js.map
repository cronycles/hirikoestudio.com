{"version":3,"sources":["webpack:///./resources/js/pages/auth/categories/auth.category.edit.js","webpack:///./resources/js/custom/form/wysiwyg.view.js","webpack:///./resources/js/custom/api/api.routes.js","webpack:///./resources/js/custom/logging/jslog.api.js","webpack:///./resources/js/custom/logging/jslog.js","webpack:///./resources/js/pages/page.factory.js","webpack:///./resources/js/custom/form/captcha/captcha.view.js","webpack:///./resources/js/pages/page.js","webpack:///./resources/js/custom/imagesLazy/images.lazy.js","webpack:///./resources/js/custom/imagesUploader/images.uploader.view.js","webpack:///./resources/js/custom/form/models/field.model.js","webpack:///./resources/js/bootstrap.js","webpack:///./resources/js/custom/form/form.view.js","webpack:///./resources/js/custom/form/models/validation.model.js","webpack:///./resources/js/custom/crud/crud.js","webpack:///./resources/js/custom/httpMessages/notifications.view.js","webpack:///./resources/js/pages/auth/categories/auth.category.create.js","webpack:///./resources/js/custom/httpMessages/notifications.js","webpack:///./resources/js/pages/auth/index.js","webpack:///./resources/js/pages/auth/categories/auth.categories.sort.js","webpack:///./resources/js/pages/auth/projects/auth.project.create.js","webpack:///./resources/js/custom/sorting/sorting.view.js","webpack:///./resources/js/custom/form/wysiwyg.js","webpack:///./resources/js/custom/form/field.validator.manager.js","webpack:///./resources/js/custom/form/form.validator.js","webpack:///./resources/js/custom/form/captcha/captcha.js","webpack:///./resources/js/custom/form/form.js","webpack:///./resources/js/ready.js","webpack:///./resources/js/pages/auth/register.js","webpack:///./resources/js/custom/imagesUploader/images.service.js","webpack:///./resources/js/custom/imagesUploader/images.api.js","webpack:///./resources/js/custom/imagesUploader/images.uploader.js","webpack:///./resources/js/pages/auth/projects/auth.project.images.js","webpack:///./resources/js/categories/category.selection.view.js","webpack:///./resources/js/pages/auth/projects/auth.project.edit.js","webpack:///./resources/js/custom/cro-fs-images-carousel/cro.fs.images.carousel.js","webpack:///./resources/js/pages/home.js","webpack:///./resources/js/app.js","webpack:///./resources/js/pages/auth/projects/auth.projects.index.js","webpack:///./resources/js/pages/contact.js","webpack:///./resources/js/custom/scriptsLazy/lazy.factory.js","webpack:///./resources/js/pages/auth/reset.password.js","webpack:///./resources/js/categories/category.selection.js","webpack:///./resources/js/pages/projects.js","webpack:///./resources/js/custom/api/api.service.js","webpack:///./resources/js/custom/imagesUploader/images.uploader.errors.js","webpack:///./resources/js/custom/crud/crud.view.js","webpack:///./resources/js/pages/auth/forgot.password.js","webpack:///./resources/js/viewComponents/header/header.view.js","webpack:///./resources/js/pages/auth/categories/auth.categories.index.js","webpack:///./resources/js/viewComponents/header/header.js","webpack:///./resources/js/pages/auth/login.js","webpack:///./resources/js/custom/sorting/sorting.js","webpack:///./resources/js/pages/auth/projects/auth.projects.sort.js"],"names":["PageAuthCategoryEdit","Page","constructor","super","Form","WysiwygView","isWysiwygVisible","outcome","this","$wysiwig","length","getWysiwygSelector","wysiwygSelector","onFormSubmit","callback","closest","on","onFieldFocusOut","tfocusOut","setWysiwygTextToHiddenInput","text","$","find","qlEditorSelector","html","$hiddenInputSelector","val","hiddenInputSelector","ApiRoutes","tapi","tapiLog","JSLogApi","api","ApiService","routes","data","ajaxPost","logInfo","logError","JSLog","_onWindowError","async","err","url","line","params","errorString","console","error","logErrorOnServer","msg","logInfoOnServer","errorStack","name","message","stack","queryString","document","location","search","pathname","referrer","userAgent","navigator","window","onerror","PageFactory","$page","pages","id","className","PageHome","PageProjects","PageContact","PageAuthLogin","PageAuthRegister","PageAuthForgotPassword","PageAuthResetPassword","PageAuthIndex","PageAuthCategoriesIndex","PageAuthCategoryCreate","PageAuthCategoriesSort","PageAuthProjectsIndex","PageAuthProjectCreate","PageAuthProjectEdit","PageAuthProjectsSort","PageAuthProjectImages","bindCurrentPageModule","currentPageId","map","page","pageClassName","log","e","CaptchaView","isCaptchaEnabled","formId","captchaField","getKey","tkey","addTokenToCaptchaInput","token","$captchaFields","filter","index","element","tform","captchaSelector","require","ImagesLazy","loadAllLazyImagesIntoThePage","Lazy","effect","effectTime","threshold","ImagesUploaderView","getConfigurationFromHtml","uploadUrl","$imageHandling","maxNumberOfFiles","onSelectFiles","$fileSelect","off","onDropFiles","$dropZone","addClass","removeClass","originalEvent","dataTransfer","files","resetAll","appendThumbnail","thumbnail","$clonedThumbTheme","$thumbTheme","clone","cloneableSelector","attr","src","$thumbsContainer","append","noneClass","updateThumbnailPercent","$thumbnail","percentCompleted","width","updateThumbnailOk","imageId","$clonedSuccessItem","$thumbItemSuccessTheme","replaceWith","show","updateThumbnailError","$clonedErrorItem","$thumbItemErrorTheme","onDeleteFile","deleteButton","currentTarget","thumbSelector","showDeleteConfirmButton","onDeleteFileConfirm","onImageSmallViewButtonClick","button","$button","isSmallViewActive","hasClass","enableImageSmallView","activeClass","disableImageSmallView","hideThumbnail","showThumbnail","deleteThumbnail","remove","getNumberOfUploadedImages","printErrorToUser","ImageUploaderError","MAX_UPLOAD_FILE_REACHED","NO_VALID_IMAGE","$clone","$clonableError","$errorAlertContainer","$errorAlerts","$fileElem","$imageHandlingClonableInputFile","input","Array","from","appendTo","$imageHandlingForm","click","$deleteButtons","imageUploaderSelector","thumbOkSelector","thumbKoSelector","Field","value","validations","isValid","_","axios","defaults","headers","common","FormView","$forms","tsubmit","$form","tid","setFormInLoadingMode","formButton","formButtonSelector","outerWidth","height","outerHeight","$formButton","css","setFormInEditMode","buttonText","getAllFieldsWithTheirValidations","domFields","fieldSelector","domField","$field","field","push","showErrorsOnFormFields","fields","showErrorOnFormField","fieldName","is","nextAll","fieldSubSelector","fieldErrorClass","onFieldFocus","tfocusIn","tname","$fieldSub","continueFormSubmit","submit","getFieldWithHisValidations","showGenericFormError","genericErrorSelector","tnone","resetFormErrors","resetFieldErrors","fieldSubClass","tval","wysiwygClass","fieldValue","validationsArray","validationObject","validation","Validation","Crud","CrudView","onDeleteClick","itemId","resetAllDeleteButtons","NotificationsView","onSuccessCloseButtonClick","$successButton","tclick","closeSuccessMessage","$successMessageContainer","hide","successButtonSelector","successMessageContainerSelector","Notifications","Sorting","onUpdate","updateUrl","orderedIds","SortingView","turl","sortableContainerSelector","sortableElementSelector","sortableHandleSelector","$sortableContainer","getSortableListContainer","get","getSortableHandle","getNewListOfSortedId","sortableElements","sortableElement","getUpdateUrl","Wysiwyg","Quill","modules","toolbar","list","theme","FieldValidatorManager","validateRequired","exactNumber","minNumber","maxNumber","validateNumber","isNaN","minOrMaxCondition","validateAlpha","alphaNumericRegexPart","basicRegex","part1","permitsAlphaNumericChars","exactNumberOfChars","minNumberOfChars","maxNumberOfChars","testingRegex","replace","RegExp","test","validatePrice","exactPrice","minPrice","maxPrice","fieldNumber","toString","validateDate","filedDate","Date","exactDateString","minDateString","maxDateString","exactDate","getTime","minDate","maxDate","validateEmail","exactEmail","valueToBeTested","parseFloat","minValue","minNumberOfCharsPermitted","maxNumberOfCharsPermitted","greaterOrLowerCondition","maxValue","FormValidator","validateAllFields","validateField","validValidationCounter","validationFunction","1","2","3","4","5","6","Captcha","isEnabled","executeCaptcha","setTimeout","key","grecaptcha","execute","action","ready","invalidFields","LazyFactory","loadLazyScripts","bindWindowError","Header","ImagesService","createThumbnailFromFile","file","Promise","resolve","reader","FileReader","onload","imageObject","Image","target","result","readAsDataURL","isAnImageFileType","type","ImagesApi","uploadImageToGivenUrl","givenUrl","uploadProgressFunction","body","FormData","ajaxPostFileFormData","deleteImageById","ajaxDelete","changeImageSmallViewById","isActive","ImagesUploader","view","hasErrors","imagesToBeUploaded","errorList","errors","config","isUploading","shift","fileToBeUploaded","response","service","updateImagesSortUrl","imagesOrderedIds","CategorySelectionView","dataCategoryIdSelector","categorySelector","categoryBoxSelector","$categories","$categoryBoxes","onSelectCategory","category","$clickedCategory","selectCategoryFromWrapper","categoryId","getCategoryIdFromWrapper","showAllBoxes","showOnlyBoxesOfCategory","$filteredBoxes","$categoryBox","$categoryWrapper","CroFullScreenImagesCarousel","customOptions","mergedOptions","container","items","slideBy","controls","nav","autoplayButtonOutput","autoplay","mouseDrag","autoplayTimeout","autoplayHoverPause","lazyload","tns","clientServerSelector","clSrvConfig","getClientServerConfig","lazyJS","lazyJs","script","createElement","getElementsByTagName","appendChild","CategorySelection","SHOW_ALL_CATEGORIES_ID","doesShowAllCategories","ajaxGet","post","delete","onUploadProgress","progressEvent","Math","round","loaded","total","trim","parsedResponse","JSON","stringify","parse","parsedResponseData","status","$itemsContainer","$item","HeaderView","onBurgerButtonClick","$burgerButton","isNavMenuOpened","$navMenu","topen","closeNavMenu","openNavMenu","onDropDownButtonClick","$dropdownButtons","dropdownButtonSelector","isDropDownButtonOpened","next","dropdownContentSelector","closeDropDownMenu","$dropdownContent","openDropDownMenu","tclosed","ticon","headerSelector","burgerButtonSelector","navMenuSelector","$header","$icon","options","$sortableListContainer","Sortable","handle","animation","ghostClass","orderedIdList"],"mappings":"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","file":"/js/app.js","sourcesContent":["import Page from '../../page';\nimport Form from \"../../../custom/form/form\";\n\nexport default class PageAuthCategoryEdit extends Page {\n    constructor() {\n        super();\n        new Form();\n    }\n};\n","export default class WysiwygView {\n    constructor() {\n\n        //Texts\n        this.tfocusOut = \"focusout\";\n\n        //Selectors\n        this.wysiwygSelector = \".jwysiwyg\";\n        this.hiddenInputSelector = \".jwysiwygInput\";\n        this.qlEditorSelector = \".ql-editor\";\n\n        //DOM\n        this.$wysiwig = $(this.wysiwygSelector);\n        this.$hiddenInputSelector = $(this.hiddenInputSelector);\n    }\n\n    isWysiwygVisible = () => {\n        let outcome = false;\n        if(this.$wysiwig && this.$wysiwig.length > 0) {\n            outcome = true;\n        }\n        return outcome;\n    };\n\n    getWysiwygSelector = () => {\n        return this.wysiwygSelector;\n    };\n\n    onFormSubmit = (callback) => {\n        if(this.isWysiwygVisible()) {\n            const $form = this.$wysiwig.closest(\"form\");\n            $form.on('submit', () => {\n                callback();\n                return true;\n            });\n        }\n    };\n\n    onFieldFocusOut = (callback) => {\n        this.$wysiwig.on(this.tfocusOut, () => {\n            callback();\n            return true;\n        });\n    };\n\n    setWysiwygTextToHiddenInput = () => {\n        const text = $(this.wysiwygSelector).find(this.qlEditorSelector).html();\n        $(this.$hiddenInputSelector).val(text);\n    };\n}\n\n\n\n","export default class ApiRoutes {\n    constructor() {\n        this.tapi = \"/api\";\n        this.tapiLog = this.tapi + \"/log\";\n    }\n\n    get logInfo() {\n        return this.tapiLog + \"/info\";\n    }\n\n    get logError() {\n        return this.tapiLog + \"/error\";\n    }\n\n} ","import ApiRoutes from '../api/api.routes';\nimport ApiService from '../api/api.service';\n\nexport default class JSLogApi {\n    constructor() {\n        this.api = new ApiService();\n        this.routes = new ApiRoutes();\n    }\n\n    async logInfo(data) {\n        return await this.api.ajaxPost(this.routes.logInfo, data);\n    }\n\n    async logError(data) {\n        return await this.api.ajaxPost(this.routes.logError, data);\n    }\n\n}\n","import JSLogApi from './jslog.api';\n\nexport default class JSLog {\n    constructor() {\n        this.api = new JSLogApi();\n    }\n\n    async bindWindowError() {\n        _onWindowError(async (err, url, line) => {\n            let params = {\n                line: line\n            };\n            let errorString = \"Window error - \" + err;\n            console.error(err);\n            await this.logErrorOnServer(errorString, params);\n        })\n    }\n\n    async info(msg, params) {\n        await this.logInfoOnServer(msg, params);\n    }\n\n    async error(error, params) {\n        console.error(error);\n        let errorString = \"Error!\";\n        let errorStack = \"\";\n        if (error) {\n            errorString = error.name + \" - \" + error.message;\n            errorStack = error.stack;\n        }\n        await this.logErrorOnServer(errorString, params, errorStack);\n    }\n\n    async logInfoOnServer(msg, params) {\n        let data = {\n            msg: msg,\n        };\n        if (params) {\n            data.params = params;\n        }\n\n        await this.api.logInfo(data);\n    }\n\n    async logErrorOnServer(err, params, stack) {\n\n        let data = {\n            msg: err,\n        };\n        if (params) {\n            data.params = params;\n        }\n        if (stack) {\n            data.stack = stack;\n        }\n\n        data.queryString = document.location.search;\n        data.url = document.location.pathname;\n        data.referrer = document.referrer;\n        data.userAgent = navigator.userAgent;\n\n        await this.api.logError(data);\n    }\n\n}\n\nconst _onWindowError = callback => {\n    window.onerror = function (err, url, line) {\n        let suppressErrors = true;\n        callback(err, url, line);\n        return suppressErrors;\n    };\n}","import PageHome from \"./home\";\nimport PageProjects from \"./projects\";\nimport PageContact from \"./contact\";\nimport PageAuthLogin from \"./auth/login\";\nimport PageAuthIndex from \"./auth\";\nimport PageAuthRegister from \"./auth/register\";\nimport PageAuthForgotPassword from \"./auth/forgot.password\";\nimport PageAuthResetPassword from \"./auth/reset.password\";\nimport PageAuthCategoriesIndex from \"./auth/categories/auth.categories.index\";\nimport PageAuthCategoryCreate from \"./auth/categories/auth.category.create\";\nimport PageAuthCategoryEdit from \"./auth/categories/auth.category.edit\";\nimport PageAuthCategoriesSort from \"./auth/categories/auth.categories.sort\";\nimport PageAuthProjectsIndex from \"./auth/projects/auth.projects.index\";\nimport PageAuthProjectCreate from \"./auth/projects/auth.project.create\";\nimport PageAuthProjectEdit from \"./auth/projects/auth.project.edit\";\nimport PageAuthProjectsSort from \"./auth/projects/auth.projects.sort\";\nimport PageAuthProjectImages from \"./auth/projects/auth.project.images\";\n\nexport default class PageFactory {\n    constructor() {\n        this.pages = [\n            {id: 1, className: PageHome},\n            {id: 2, className: PageProjects},\n            {id: 4, className: PageContact},\n            {id: 1001, className: PageAuthLogin},\n            {id: 1002, className: PageAuthRegister},\n            {id: 1003, className: PageAuthForgotPassword},\n            {id: 1004, className: PageAuthResetPassword},\n            {id: 1010, className: PageAuthIndex},\n            {id: 1011, className: PageAuthCategoriesIndex},\n            {id: 1012, className: PageAuthCategoryCreate},\n            {id: 1013, className: PageAuthCategoryEdit},\n            {id: 1014, className: PageAuthCategoriesSort},\n            {id: 1015, className: PageAuthProjectsIndex},\n            {id: 1016, className: PageAuthProjectCreate},\n            {id: 1017, className: PageAuthProjectEdit},\n            {id: 1018, className: PageAuthProjectsSort},\n            {id: 1019, className: PageAuthProjectImages}\n        ]\n    }\n\n    bindCurrentPageModule() {\n        try {\n            const currentPageId = this.#getCurrentPageId();\n\n            if (currentPageId) {\n                this.pages.map(page => {\n                    if (page && page.id == currentPageId) {\n                        const pageClassName = page.className;\n                        new pageClassName();\n                    }\n                })\n            }\n            else {\n                log.error(\"currentPageName not found\");\n            }\n        } catch (e) {\n            log.error(e);\n        }\n\n    }\n\n    #getCurrentPageId = () => {\n        let outcome = null;\n        const $page = $(\".jpage\");\n        if ($page) {\n            outcome = $page.data('p');\n        }\n        return outcome;\n    };\n\n}\n","\nexport default class CaptchaView {\n    constructor() {\n        //texts\n        this.tkey = 'key';\n        this.tform = 'form';\n\n         //selectors\n        this.captchaSelector = '.jcaptcha';\n\n        //DOM\n        this.$captchaFields = $(this.captchaSelector);\n\n\n    }\n\n    isCaptchaEnabled = (formId) => {\n        let outcome = false;\n        var captchaField = this.#getCaptchaFieldByFormId(formId);\n        if(captchaField && captchaField.length > 0) {\n            outcome = true;\n        }\n        return outcome;\n    };\n\n    getKey = (formId) => {\n        var captchaField = this.#getCaptchaFieldByFormId(formId);\n        const outcome = $(captchaField).data(this.tkey);\n        return outcome;\n    };\n\n    addTokenToCaptchaInput = (formId, token) => {\n        var captchaField = this.#getCaptchaFieldByFormId(formId);\n        $(captchaField).val(token);\n    };\n\n    #getCaptchaFieldByFormId = (formId) => {\n        return this.$captchaFields.filter((index, element) => {\n            return $(element).data(this.tform) === formId;\n        });\n    };\n\n};\n","\nexport default class Page {\n    constructor() {}\n}","require('jquery-lazy');\n\nexport default class ImagesLazy {\n    constructor() {\n    }\n\n    loadAllLazyImagesIntoThePage() {\n        $('.jlimg').Lazy();\n\n        $('.jlimg1000').Lazy({\n            effect: 'fadeIn',\n            effectTime: 1000,\n            threshold: 0\n        });\n    }\n\n}\n","import ImageUploaderError from './images.uploader.errors'\n\nexport default class ImagesUploaderView {\n    #deleteSelector;\n    #deleteConfirmSelector;\n    #smallViewSelector;\n    constructor() {\n\n        //Selector\n        this.#deleteSelector = \".jDel\";\n        this.#deleteConfirmSelector = \".jDelConfirm\";\n        this.#smallViewSelector = \".jSmallView\";\n\n        this.imageUploaderSelector = \".jimgHandling\";\n\n        this.cloneableSelector = \"jClonable\";\n        this.thumbSelector = \"jThumb\";\n        this.thumbOkSelector = \"jThOk\";\n        this.thumbKoSelector = \"jThKo\";\n\n        //classes\n        this.noneClass = \"none\";\n        this.activeClass = \"active\";\n\n        //DOM\n        this.$imageHandling = $(this.imageUploaderSelector);\n        this.$imageHandlingClonableInputFile = $(\".jimgHandling__file-input-clonable\");\n        this.$imageHandlingForm = $(\".juploadForm\");\n        this.$fileSelect = this.$imageHandling.find(\".jselectFile\");\n        this.$fileElem = this.$imageHandling.find(\"#fileElem\");\n        this.$dropZone = this.$imageHandling.find(\".jdropzone\");\n        this.$thumbsContainer = this.$imageHandling.find(\".jThumbsContainer\");\n        this.$thumbTheme = this.$imageHandling.find(\".\" + this.thumbSelector + \".\" + this.cloneableSelector);\n        this.$thumbItemSuccessTheme = this.$imageHandling.find(\".\" + this.thumbOkSelector + \".\" + this.cloneableSelector);\n        this.$thumbItemErrorTheme = this.$imageHandling.find(\".\" + this.thumbKoSelector + \".\" + this.cloneableSelector);\n        this.$errorAlertContainer = this.$imageHandling.find(\".jerrorListCont\");\n        this.$clonableError = this.$errorAlertContainer.find(\".\" + this.cloneableSelector);\n        this.$errorAlerts = this.$errorAlertContainer.find(\".jError\");\n    }\n\n\n    getConfigurationFromHtml = () => {\n        return {\n            uploadUrl: this.$imageHandling.data('url'),\n            maxNumberOfFiles: this.$imageHandling.data('max-number-of-files'),\n        };\n    };\n\n    onSelectFiles = (callback) => {\n        this.$fileSelect.off().on('click', (e) => {\n            this.#createClassicHiddenInputFileAndCallIt(callback);\n            return false;\n        });\n\n    };\n\n    onDropFiles = (callback) => {\n        this.$dropZone.off(\"dragenter dragover\").on(\"dragenter dragover\", () => {\n            this.$dropZone.addClass(\"dragging\");\n            return false;\n        });\n        this.$dropZone.off(\"dragleave\").on(\"dragleave\", () => {\n            this.$dropZone.removeClass(\"dragging\");\n            return false;\n        });\n\n        this.$dropZone.off(\"drop\").on(\"drop\", (e) => {\n            //noinspection JSUnresolvedVariable\n            callback(e.originalEvent.dataTransfer.files);\n            this.$dropZone.removeClass(\"dragging\");\n            return false;\n        });\n    };\n\n    resetAll = () => {\n        this.#resetAllButtons();\n        this.#hideErrors();\n    };\n\n    appendThumbnail = (thumbnail) => {\n        let $clonedThumbTheme = this.$thumbTheme.clone();\n        $clonedThumbTheme.removeClass(this.cloneableSelector);\n\n        let imageContainer = $clonedThumbTheme.find(\".jthumbImg\");\n        imageContainer.attr('src', thumbnail.src);\n\n        this.$thumbsContainer.append($clonedThumbTheme);\n        $clonedThumbTheme.removeClass(this.noneClass);\n\n        return $clonedThumbTheme;\n    };\n\n    updateThumbnailPercent = ($thumbnail, percentCompleted) => {\n        $thumbnail.find('.jPercentageBar').width(percentCompleted + '%');\n        $thumbnail.find('.jPercentageNumber').html(percentCompleted + '%');\n    };\n\n    updateThumbnailOk = ($thumbnail, imageId) => {\n        $thumbnail.attr('data-id', imageId);\n\n        let $clonedSuccessItem = this.$thumbItemSuccessTheme.clone();\n        $clonedSuccessItem.removeClass(this.cloneableSelector);\n        $thumbnail.find(\".jthumbPercentageBarContainer\").replaceWith($clonedSuccessItem);\n\n        $clonedSuccessItem.show();\n    };\n\n    updateThumbnailError = ($thumbnail) => {\n        let $clonedErrorItem = this.$thumbItemErrorTheme.clone();\n        $clonedErrorItem.removeClass(this.cloneableSelector);\n        $thumbnail.find(\".jthumbPercentageBarContainer\").replaceWith($clonedErrorItem);\n        $clonedErrorItem.show();\n    };\n\n    /**\n     * @param {function} callback\n     */\n    onDeleteFile = (callback) => {\n        this.$thumbsContainer.on('click', this.#deleteSelector, (deleteButton) => {\n            let id = $(deleteButton.currentTarget).closest(\".\" + this.thumbSelector).data(\"id\");\n            callback(id);\n            return false;\n        });\n    };\n\n    /**\n     * @param {int} imageId\n     */\n    showDeleteConfirmButton = (imageId) => {\n        const $thumbnail = this.#findThumbnailByImageId(imageId);\n        $thumbnail.find(this.#deleteSelector).addClass(this.noneClass);\n        $thumbnail.find(this.#deleteConfirmSelector).removeClass(this.noneClass);\n    };\n\n    /**\n     * @param {function} callback\n     */\n    onDeleteFileConfirm = (callback) => {\n        this.$thumbsContainer.on('click', this.#deleteConfirmSelector, (deleteButton) => {\n            let id = $(deleteButton.currentTarget).closest(\".\" + this.thumbSelector).data(\"id\");\n            callback(id);\n            return false;\n        });\n    };\n\n    /**\n     * @param {function} callback\n     */\n    onImageSmallViewButtonClick = (callback) => {\n        this.$thumbsContainer.on('click', this.#smallViewSelector, (button) => {\n            const $button = $(button.currentTarget);\n            let id = $button.closest(\".\" + this.thumbSelector).data(\"id\");\n            let isSmallViewActive = $button.hasClass('active');\n            callback(id, isSmallViewActive);\n            return false;\n        });\n    };\n\n    /**\n     * @param {int} imageId\n     */\n    enableImageSmallView = (imageId) => {\n        const $thumbnail = this.#findThumbnailByImageId(imageId);\n        $thumbnail.find(this.#smallViewSelector).addClass(this.activeClass);\n    };\n\n    /**\n     * @param {int} imageId\n     */\n    disableImageSmallView = (imageId) => {\n        const $thumbnail = this.#findThumbnailByImageId(imageId);\n        $thumbnail.find(this.#smallViewSelector).removeClass(this.activeClass);\n    };\n\n    hideThumbnail = (id) => {\n        let $thumbnail = this.#findThumbnailByImageId(id);\n        $thumbnail.addClass(this.noneClass);\n    };\n\n    showThumbnail = (id) => {\n        let $thumbnail = this.#findThumbnailByImageId(id);\n        $thumbnail.addClass(this.noneClass);\n    };\n\n    deleteThumbnail = (id) => {\n        let $thumbnail = this.#findThumbnailByImageId(id);\n        $thumbnail.remove();\n    };\n\n    getNumberOfUploadedImages = () => {\n        return this.$thumbsContainer.find(\"li\").length;\n    };\n\n    /**\n     * @param error {ImageUploaderError}\n     */\n    printErrorToUser = (error) => {\n        let errorString = \"\";\n        switch (error) {\n            case ImageUploaderError.MAX_UPLOAD_FILE_REACHED :\n                errorString = this.$imageHandling.data('max-uploaded-reached-err');\n                break;\n            case ImageUploaderError.NO_VALID_IMAGE :\n                errorString = this.$imageHandling.data('no-valid-image-err');\n                break;\n        }\n        let $clone = this.$clonableError.clone();\n        $clone.removeClass(this.cloneableSelector).addClass(\"jError\");\n        $clone.html(errorString);\n        this.$errorAlertContainer.append($clone);\n        this.$errorAlerts = this.$errorAlertContainer.find(\".jError\");\n        $clone.removeClass(\"none\");\n        this.$errorAlertContainer.removeClass(\"none\");\n    };\n\n    /**\n     * we need to create always the input to fix the problem of uploading the same image\n     * @param callback\n     */\n    #createClassicHiddenInputFileAndCallIt = (callback) => {\n        if (this.$fileElem) {\n            this.$fileElem.remove();\n        }\n        let $clone = this.$imageHandlingClonableInputFile.clone();\n        $clone.off().on(\"change\", (input) => {\n            callback(Array.from(input.currentTarget.files));\n            return false;\n        });\n        $clone.appendTo(this.$imageHandlingForm);\n        this.$fileElem = $clone;\n\n        this.$fileElem.click();\n    };\n\n    #hideErrors = () => {\n        this.$errorAlerts.remove();\n        this.$errorAlertContainer.addClass(\"none\");\n    };\n\n    #resetAllButtons = () => {\n        const $deleteButtons = this.#getAllDeleteButtons();\n        const $confirmButtons = this.#getAllConfirmButtons();\n        $confirmButtons.addClass(this.noneClass);\n        $deleteButtons.removeClass(this.noneClass);\n\n    };\n\n    /**\n     * @param {int} id\n     * @returns {jQuery}\n     */\n    #findThumbnailByImageId(id) {\n        return this.$thumbsContainer.find('.' + this.thumbSelector + '[data-id=\"' + id + '\"]');\n    }\n\n    /**\n     * @returns {jQuery}\n     */\n    #getAllConfirmButtons = () => {\n        return this.$thumbsContainer.find(this.#deleteConfirmSelector);\n    };\n\n    /**\n     * @returns {jQuery}\n     */\n    #getAllDeleteButtons = () => {\n        return this.$thumbsContainer.find(this.#deleteSelector);\n    };\n}\n\n\n","export default class Field {\n    /**\n     * @type {number}\n     */\n    name;\n\n    /**\n     * @type {string|number}\n     */\n    value;\n\n    /**\n     * @type {Array.<Validation>}\n     */\n    validations;\n\n    /**\n     * @type {boolean}\n     */\n    isValid;\n\n    constructor(name, value, validations) {\n        this.name = name;\n        this.value = value;\n        this.validations = validations;\n        this.isValid = false;\n    }\n}\n","import JSLog from './custom/logging/jslog';\n\nwindow._ = require('lodash');\n\n/**\n * We'll load jQuery and the Bootstrap jQuery plugin which provides support\n * for JavaScript based Bootstrap features such as modals and tabs. This\n * code may be modified to fit the specific needs of your application.\n */\n\ntry {\n    window.$ = window.jQuery = require('jquery');\n} catch (e) {}\n\n/**\n * We'll load the axios HTTP library which allows us to easily issue requests\n * to our Laravel back-end. This library automatically handles sending the\n * CSRF token as a header based on the value of the \"XSRF\" token cookie.\n */\n\nwindow.axios = require('axios');\n\nwindow.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\nwindow.log = new JSLog();\n\n/**\n * Echo exposes an expressive API for subscribing to channels and listening\n * for events that are broadcast by Laravel. Echo and event broadcasting\n * allows your team to easily build robust real-time web applications.\n */\n\n// import Echo from 'laravel-echo';\n\n// window.Pusher = require('pusher-js');\n\n// window.Echo = new Echo({\n//     broadcaster: 'pusher',\n//     key: process.env.MIX_PUSHER_APP_KEY,\n//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n//     forceTLS: true\n// });\n","import Field from \"./models/field.model\";\nimport Validation from \"./models/validation.model\";\n\nexport default class FormView {\n    constructor() {\n\n        //Texts\n        this.tsubmit = \"submit\";\n        this.tval = \"val\";\n        this.tid = \"id\";\n        this.tname = \"name\";\n        this.tnone = \"none\";\n        this.tfocusIn = \"focusin\";\n        this.tfocusOut = \"focusout\";\n        this.tform = \"form\";\n\n        //Classes\n        this.fieldErrorClass = \"form__field--error\";\n        this.fieldSubClass = 'jfieldSub';\n        this.wysiwygClass = 'jwysiwygInput';\n\n        //Selectors\n        this.formButtonSelector = \".jformSend\";\n        this.fieldSelector = '.jfield';\n        this.genericErrorSelector = '.jsFormErr';\n        this.fieldSubSelector = `.${this.fieldSubClass}`;\n\n        //DOM\n        this.$forms = $(this.tform);\n    }\n\n    onFormSubmit = (callback) => {\n        this.$forms.off(this.tsubmit).on(this.tsubmit, (element) => {\n            const $form = $(element.currentTarget);\n            callback($form.attr(this.tid));\n            return false;\n        });\n    };\n\n    setFormInLoadingMode = (formId) => {\n        const $form = this.#getJqueryFormById(formId);\n        const formButton = $form.find(this.formButtonSelector);\n        const width = formButton.outerWidth();\n        const height = formButton.outerHeight();\n        const $formButton = $(formButton);\n        $formButton.attr(\"disabled\", true);\n        $formButton.css(\"width\", width);\n        $formButton.css(\"height\", height);\n        $formButton.text(\"\");\n        $formButton.addClass(\"loading__spinner\")\n    };\n\n    setFormInEditMode = (formId) => {\n        const $form = this.#getJqueryFormById(formId);\n        const formButton = $form.find(this.formButtonSelector);\n        const $formButton = $(formButton);\n        $formButton.attr(\"disabled\", false);\n        const buttonText = $formButton.data(\"txt\");\n        $formButton.removeClass(\"loading__spinner\");\n        $formButton.text(buttonText);\n\n    };\n\n    /**\n     *\n     * @param {string} formId\n     * @returns {Array.<Field>}\n     */\n    getAllFieldsWithTheirValidations = (formId) => {\n        try {\n            let outcome = [];\n            const $form = this.#getJqueryFormById(formId);\n            const domFields = $form.find(this.fieldSelector);\n            if(domFields && domFields.length > 0) {\n                for(const domField of domFields) {\n                    let $field = $(domField);\n                    let field = this.#createNewFieldModelByJqueryObject($field);\n                    outcome.push(field);\n                }\n            }\n            return outcome;\n        }catch (e) {\n            log.error(e);\n            return [];\n        }\n    };\n\n    /**\n     * @param {string} formId\n     * @param {Array.<Field>} fields\n     */\n    showErrorsOnFormFields = (formId, fields) => {\n        try {\n            if(formId && fields && fields.length > 0) {\n                for(const field of fields) {\n                    this.showErrorOnFormField(formId, field);\n                }\n            }\n        }catch (e) {\n            log.error(e);\n        }\n    };\n\n    /**\n     * @param {string} formId\n     * @param {Field} field\n     */\n    showErrorOnFormField = (formId, field) => {\n        const fieldName = field.name;\n        let $field = this.#findJqueryFormFieldByName(formId, fieldName);\n        if($field.is(\":hidden\")) {\n            $field = $field.nextAll(this.fieldSubSelector);\n        }\n        $field.addClass(this.fieldErrorClass);\n        this.#showFieldErrorText(formId, fieldName);\n    };\n\n    onFieldFocus = (callback) => {\n        this.$forms.on(this.tfocusIn, this.fieldSelector, (element) => {\n            const $field = $(element.currentTarget);\n            const $form = $field.closest(this.tform);\n            callback($form.attr(this.tid), $field.attr(this.tname));\n        });\n\n        this.$forms.on(this.tfocusIn, this.fieldSubSelector, (element) => {\n            const $fieldSub = $(element.currentTarget);\n            const $field = this.#findJqueryFormFieldByJqueryFieldSub($fieldSub);\n            const $form = $field.closest(this.tform);\n            callback($form.attr(this.tid), $field.attr(this.tname));\n        });\n    };\n\n    onFieldFocusOut = (callback) => {\n        this.$forms.on(this.tfocusOut, this.fieldSelector, (element) => {\n            const $field = $(element.currentTarget);\n            const $form = $field.closest(this.tform);\n            callback($form.attr(this.tid), $field.attr(this.tname));\n        });\n\n        this.$forms.on(this.tfocusOut, this.fieldSubSelector, (element) => {\n            const $fieldSub = $(element.currentTarget);\n            const $field = this.#findJqueryFormFieldByJqueryFieldSub($fieldSub);\n            const $form = $field.closest(this.tform);\n            callback($form.attr(this.tid), $field.attr(this.tname));\n        });\n    };\n\n    continueFormSubmit = (formId) => {\n        const $form = this.#getJqueryFormById(formId);\n        $form.off(this.tsubmit).submit();\n    };\n\n\n    getFieldWithHisValidations = (formId, fieldName) => {\n        try {\n            const $field = this.#findJqueryFormFieldByName(formId, fieldName);\n            return this.#createNewFieldModelByJqueryObject($field);\n        }\n        catch (e) {\n            log.error(e);\n            return null;\n        }\n\n    };\n\n    showGenericFormError = () => {\n        $(this.genericErrorSelector).removeClass(this.tnone);\n    };\n\n    resetFormErrors = () => {\n        $(this.genericErrorSelector).addClass(this.tnone);\n    };\n\n    /**\n     * @param {string} formId\n     * @param {string} fieldName\n     */\n    resetFieldErrors = (formId, fieldName) => {\n        let $field = this.#findJqueryFormFieldByName(formId, fieldName);\n        if($field.is(\":hidden\")) {\n            $field = $field.nextAll(this.fieldSubSelector);\n        }\n        $field.removeClass(this.fieldErrorClass);\n        this.#hideFieldErrorText(formId, fieldName);\n    };\n\n    /**\n     *\n     * @param {string} formId\n     * @param {string} fieldName\n     * @returns {jQuery}\n     */\n    #findJqueryFormFieldByName = (formId, fieldName) => {\n        const $form = this.#getJqueryFormById(formId);\n        return $form.find(`.jfield[name=\"${fieldName}\"]`);\n    };\n\n    /**\n     /**\n     *\n     * @param {string} formId\n     * @param {string} fieldName\n     */\n    #showFieldErrorText = (formId, fieldName) => {\n        const $fieldErrorText = this.#getFieldErrorTextJqueryObject(formId, fieldName);\n        $fieldErrorText.removeClass(this.tnone);\n    };\n\n    /**\n     *\n     * @param {string} formId\n     * @param {string} fieldName\n     */\n    #getFieldErrorTextJqueryObject = (formId, fieldName) => {\n        const $form = this.#getJqueryFormById(formId);\n        return $form.find(`.jerrText[data-f=\"${fieldName}\"]`);\n    };\n\n    #getJqueryFormById = (formId) => {\n        return $(\"#\" + formId);\n    };\n\n    /**\n     * @param {jQuery} $field\n     * @returns {Field}\n     */\n    #createNewFieldModelByJqueryObject($field) {\n        try {\n            let outcome = null;\n            if($field) {\n                const fieldName = $field.attr(this.tname);\n                let fieldValue = $field.val();\n                if($field.hasClass(this.wysiwygClass)) {\n                    fieldValue = $(fieldValue).text();\n                }\n                const validationsArray = $field.data(this.tval);\n                let validations = [];\n                if(validationsArray) {\n                    for(let validationObject of validationsArray) {\n                        let validation = new Validation(validationObject.id, validationObject.params);\n                        validations.push(validation);\n                    }\n                }\n                outcome = new Field(fieldName, fieldValue, validations);\n\n            }\n            return outcome;\n        }catch (e) {\n            log.error(e);\n            return null;\n        }\n    }\n\n\n    /**\n     *\n     * @param {jQuery} $fieldSub\n     * @returns {jQuery}\n     */\n    #findJqueryFormFieldByJqueryFieldSub = ($fieldSub) => {\n        if(!$fieldSub.hasClass(this.fieldSubClass)) {\n            $fieldSub = $fieldSub.closest(this.fieldSubSelector);\n        }\n        const $form = $fieldSub.closest(this.tform);\n        const fieldName = $fieldSub.data(this.tname);\n        return this.#findJqueryFormFieldByName($form.attr(this.tid), fieldName);\n    };\n\n\n    /**\n     *\n     * @param {string} formId\n     * @param {string} fieldName\n     */\n    #hideFieldErrorText = (formId, fieldName) => {\n        const $fieldErrorText = this.#getFieldErrorTextJqueryObject(formId, fieldName);\n        $fieldErrorText.addClass(this.tnone);\n    };\n\n\n\n}\n\n\n\n","export default class Validation {\n    /**\n     * @type {number}\n     */\n    id;\n\n    /**\n     * @type {Array.<string>}\n     */\n    params;\n\n    /**\n     * @type {boolean}\n     */\n    isValid;\n\n    constructor(id, params) {\n        this.id = id;\n        this.params = params;\n        this.isValid = false;\n    }\n}\n","import CrudView from \"./crud.view\";\nexport default class Crud {\n    #view;\n    constructor() {\n        this.#view = new CrudView();\n\n        this.#view.onDeleteClick((itemId)=>{\n            this.#view.resetAllDeleteButtons();\n            this.#view.showDeleteConfirmButton(itemId)\n        })\n    }\n}\n","export default class NotificationsView {\n    constructor() {\n\n        //Texts\n        this.tclick = \"click\";\n\n        //Selectors\n        this.successButtonSelector = \".jsuccessClose\";\n        this.successMessageContainerSelector = \".jsuccessMessageContainer\";\n\n        //DOM\n        this.$successButton = $(this.successButtonSelector);\n        this.$successMessageContainer = $(this.successMessageContainerSelector);\n    }\n\n    onSuccessCloseButtonClick = (callback) => {\n        this.$successButton.off(this.tclick).on(this.tclick, (element) => {\n            callback();\n            return false;\n        });\n    };\n\n    closeSuccessMessage = () => {\n        this.$successMessageContainer.hide();\n    };\n};\n","import Page from '../../page';\nimport Form from \"../../../custom/form/form\";\n\nexport default class PageAuthCategoryCreate extends Page {\n    constructor() {\n        super();\n        new Form();\n    }\n};\n","import NotificationsView from \"./notifications.view\";\n\nexport default class Notifications {\n    #view;\n    constructor() {\n        this.#view = new NotificationsView();\n\n        this.#view.onSuccessCloseButtonClick(this.#view.closeSuccessMessage);\n    }\n};\n","import Page from \"../page\";\nimport Form from \"../../custom/form/form\";\n\nexport default class PageAuthIndex extends Page {\n    constructor() {\n        super();\n        new Form();\n    }\n};\n","import Page from '../../page';\nimport Sorting from '../../../custom/sorting/sorting'\nimport ApiService from \"../../../custom/api/api.service\";\n\nexport default class PageAuthCategoriesSort extends Page {\n    #api;\n    constructor() {\n        super();\n        this.api = new ApiService();\n        new Sorting({\n            onUpdate: (updateUrl, orderedIds) => this.#onUpdate(updateUrl, orderedIds)\n\n        });\n    }\n\n    #onUpdate(updateUrl, orderedIds) {\n        console.log(orderedIds);\n        this.api.ajaxPost(updateUrl, orderedIds)\n    }\n};\n","import Page from '../../page';\nimport Form from \"../../../custom/form/form\";\n\nexport default class PageAuthProjectCreate extends Page {\n    constructor() {\n        super();\n        new Form();\n    }\n};\n","export default class SortingView {\n    constructor() {\n        //Texts\n        this.tid = \"id\";\n        this.turl = \"url\";\n\n        //Selectors\n        this.sortableContainerSelector = '.jsortableContainer';\n        this.sortableElementSelector = '.jsortableElement';\n        this.sortableHandleSelector = '.jSortHandle';\n\n        //Wrappers\n        this.$sortableContainer = $(this.sortableContainerSelector);\n    }\n\n    /**\n     * @returns {HTMLBaseElement}\n     */\n    getSortableListContainer() {\n        return this.$sortableContainer.get(0);\n    }\n\n    /**\n     * @returns {string}\n     */\n    getSortableHandle() {\n        return this.sortableHandleSelector;\n    }\n\n    getNewListOfSortedId() {\n        let outcome = [];\n        const sortableElements = this.$sortableContainer.find(this.sortableElementSelector);\n        if(sortableElements && sortableElements.length > 0) {\n            outcome = sortableElements.map((index, sortableElement) => $(sortableElement).data(this.tid)).get();\n        }\n        return outcome;\n    }\n\n    getUpdateUrl() {\n        return this.$sortableContainer.data(this.turl)\n    }\n\n\n\n};\n","import Quill from 'quill/dist/quill.min';\nimport WysiwygView from \"./wysiwyg.view\";\nexport default class Wysiwyg {\n    #view;\n    constructor() {\n        this.#view = new WysiwygView();\n        this.#initializeWysiwygIfVisible();\n    }\n\n    #initializeWysiwygIfVisible = () => {\n        if(this.#view.isWysiwygVisible())  {\n            const wysiwygSelector = this.#view.getWysiwygSelector();\n            this.#initializeWysiwygPlugin(wysiwygSelector);\n\n            this.#view.onFormSubmit(this.#view.setWysiwygTextToHiddenInput);\n            this.#view.onFieldFocusOut(this.#view.setWysiwygTextToHiddenInput);\n        }\n    };\n\n    #initializeWysiwygPlugin = (wysiwygSelector) => {\n        if(wysiwygSelector)  {\n            new Quill(wysiwygSelector, {\n                modules: {\n                    toolbar: [\n                        ['bold', 'italic', 'underline', 'strike'],\n                        [{list: 'ordered'}],\n                        ['link']\n                    ]\n                },\n                theme: 'snow'\n            });\n        }\n    };\n\n}\n\n\n\n","export default class FieldValidatorManager {\n\n    /**\n     * valida se l'attributo è required, quindi non vuoto\n     *\n     * @param {string|number} fieldValue\n     * @param {Array.<string>} params\n     */\n    validateRequired = (fieldValue, params = []) => {\n        try {\n            let outcome = false;\n            const isFieldFilled = typeof(fieldValue) != \"undefined\" && fieldValue != null && fieldValue.length > 0;\n            if(isFieldFilled === true) {\n                if(params && params.length > 0) {\n                    const exactNumber = params[0];\n                    const minNumber = params[1];\n                    const maxNumber = params[2];\n\n                    outcome = this.#validateNumberOfChars(fieldValue, [exactNumber, minNumber, maxNumber]);\n                }\n                else {\n                    outcome = true;\n                }\n            }\n            return outcome;\n        } catch(e) {\n            log.error(e);\n            return false;\n        }\n\n    };\n\n    /**\n     * valida se l'attributo è un numero\n     * i parametri (tutti non obbligatori) sono:\n     * 1- numero esatto (il valore dev'essere uguale). Se questo parametro è pieno, non si considerano gli altri 2 parametri\n     * 2- minimo numero (il valore dev'essere maggiore o uguale a questo numero)\n     * 3- massimo numero (il valore dev'essere minore o uguale a questo numero)\n     * @param {string|number} fieldValue\n     * @param {Array.<string>} params\n     */\n    validateNumber = (fieldValue, params = []) => {\n        let outcome = false;\n        if(isNaN(fieldValue)) {\n            return false;\n        }\n        if(params.length === 0) {\n            return true;\n        }\n        const exactNumber = params[0];\n        const minNumber = params[1];\n        const maxNumber = params[2];\n\n        if(exactNumber) {\n            return this.#isValueEqualsThan(fieldValue, exactNumber)\n        }\n\n        let minOrMaxCondition = null;\n        if(minNumber) {\n            minOrMaxCondition = this.#isValueGreaterOrEqualsThan(fieldValue, minNumber);\n        }\n        if(minOrMaxCondition === false) {\n            return false;\n        }\n\n        if(maxNumber) {\n            minOrMaxCondition = this.#isValueLowerOrEqualThan(fieldValue, maxNumber);\n        }\n        if(minOrMaxCondition === null || minOrMaxCondition === true) {\n            outcome = true;\n        }\n\n        return outcome;\n    };\n\n    /**\n     * valida se l'attributo è una stringa di solo caratteri a-zA-Z o di solo alfanumerici\n     * i parametri sono:\n     * 1- si es true permette solo alfanumerico, se es false o null permette solo caratteri a-zA-Z\n     * 2- numero esatto di caratteri permessi. Se questo parametro è pieno, non si considerano gli altri 2 parametri\n     * 3- minimo numero di caratteri permessi\n     * 4- massimo numero di caratteri permessi\n     * @param {string|number} fieldValue\n     * @param {Array.<string>} params\n     */\n    validateAlpha = (fieldValue, params = []) => {\n        let outcome = false;\n        if(fieldValue) {\n            const onlyCharsRegexPart = 'a-zA-Z';\n            const alphaNumericRegexPart = '\\\\w+';\n            let basicRegex = '^([^-\\\\s][{part1}]*)$';\n\n            let part1 = onlyCharsRegexPart;\n\n            const permitsAlphaNumericChars = params[0];\n            const exactNumberOfChars = params[1];\n            const minNumberOfChars = params[2];\n            const maxNumberOfChars = params[3];\n\n            const isNumberOfCharsValid = this.#validateNumberOfChars(fieldValue, [exactNumberOfChars, minNumberOfChars, maxNumberOfChars]);\n\n            if(isNumberOfCharsValid) {\n                if(permitsAlphaNumericChars) {\n                    part1 = alphaNumericRegexPart;\n                }\n\n                let testingRegex = basicRegex.replace(\"{part1}\", part1);\n\n                const regExp = new RegExp(testingRegex,\"i\");\n                outcome = regExp.test(fieldValue);\n            }\n        }\n        return outcome;\n    };\n\n    /**\n     * valida se l'attributo è un prezzo\n     * i parametri (tutti non obbligatori) sono:\n     * 1- prezzo esatto (il valore dev'essere uguale). Se questo parametro è pieno, non si considerano gli altri 2 parametri\n     * 2- minimo prezzo (il valore dev'essere maggiore o uguale a questo prezzo)\n     * 3- massimo prezzo (il valore dev'essere minore o uguale a questo prezzo)\n     * @param {string|number} fieldValue\n     * @param {Array.<string>} params\n     */\n    validatePrice = (fieldValue, params = []) => {\n        let outcome = false;\n        if(fieldValue) {\n            let basicRegex = '^[0-9]{1,}([,.][0-9]{1,2})?$';\n\n            const exactPrice = params[0];\n            const minPrice = params[1];\n            const maxPrice = params[2];\n\n            const regExp = new RegExp(basicRegex,\"i\");\n\n            if(regExp.test(fieldValue)) {\n                const fieldNumber = fieldValue.replace(\",\", \".\");\n                const exactNumber = exactPrice ? exactPrice.toString().replace(\",\", \".\") : exactPrice;\n                const minNumber = minPrice ? minPrice.toString().replace(\",\", \".\") : minPrice;\n                const maxNumber = maxPrice ? maxPrice.toString().replace(\",\", \".\") : maxPrice;\n                outcome = this.validateNumber(fieldNumber, params = [exactNumber, minNumber, maxNumber]);\n            }\n        }\n        return outcome;\n    };\n\n    /**\n     * valida se l'attributo è un numero\n     * i parametri (tutti non obbligatori) sono:\n     * 1- data esatta (il valore dev'essere uguale). Se questo parametro è pieno, non si considerano gli altri 2 parametri\n     * 2- minima data (il valore dev'essere maggiore o uguale a questa data)\n     * 3- massima data (il valore dev'essere minore o uguale a questa data)\n     * @param {string|number} fieldValue\n     * @param {Array.<string>} params\n     */\n    validateDate = (fieldValue, params = []) => {\n        let outcome = false;\n        if(fieldValue) {\n            //formato data yyyy-mm-dd\n            let testingRegex = /^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))$/i;\n\n            const isValidDate = testingRegex.test(fieldValue);\n\n            if(!isValidDate) {\n                return false;\n            }\n            else {\n                const filedDate = new Date(fieldValue);\n\n                const exactDateString = params[0];\n                const minDateString = params[1];\n                const maxDateString = params[2];\n\n                if(exactDateString) {\n                    if(testingRegex.test(exactDateString)){\n                        const exactDate = new Date(exactDateString);\n                        return this.#isValueEqualsThan(filedDate.getTime(), exactDate.getTime())\n                    }\n                    return false;\n                }\n\n                let minOrMaxCondition = null;\n                if(minDateString) {\n                    if(testingRegex.test(minDateString)) {\n                        const minDate = new Date(minDateString);\n                        minOrMaxCondition = this.#isValueGreaterOrEqualsThan(filedDate.getTime(), minDate.getTime());\n                    }\n                    else {\n                        minOrMaxCondition = false;\n                    }\n                }\n                if(minOrMaxCondition === false) {\n                    return false;\n                }\n\n                if(maxDateString) {\n                    if(testingRegex.test(maxDateString)) {\n                        const maxDate = new Date(maxDateString);\n                        minOrMaxCondition = this.#isValueLowerOrEqualThan(filedDate.getTime(), maxDate.getTime());\n                    }\n                    else {\n                        minOrMaxCondition = false;\n                    }\n                }\n                if(minOrMaxCondition === null || minOrMaxCondition === true) {\n                    outcome = true;\n                }\n            }\n        }\n        return outcome;\n    };\n\n    /**\n     * valida se l'attributo è un numero\n     * i parametri (tutti non obbligatori) sono:\n     * 1- email esatta (il valore dev'essere uguale).\n     * @param {string|number} fieldValue\n     * @param {Array.<string>} params\n     */\n    validateEmail = (fieldValue, params = []) => {\n        let outcome = false;\n        if(fieldValue){\n            //formato data yyyy-mm-dd\n            let testingRegex = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/i;\n\n            if(testingRegex.test(fieldValue)) {\n                const exactEmail = params[0];\n                if(exactEmail) {\n                    if(testingRegex.test(exactEmail)){\n                        return this.#isValueEqualsThan(fieldValue, exactEmail)\n                    }\n                }\n                else {\n                    outcome = true;\n                }\n            }\n        }\n\n        return outcome;\n    };\n\n\n    /**\n     *\n     * @param {string|number} valueToBeTested\n     * @param {string|number} value\n     */\n    #isValueEqualsThan = (valueToBeTested, value) => {\n        try {\n            let outcome = false;\n            if(valueToBeTested && value) {\n                const floatValueToBeTested = parseFloat(valueToBeTested);\n                const floatValue = parseFloat(value);\n                outcome = floatValueToBeTested === floatValue;\n            }\n            return outcome;\n        }catch(e) {\n            log.error(e);\n            return false;\n        }\n\n    };\n\n\n    /**\n     *\n     * @param {string|number} valueToBeTested\n     * @param {string|number} minValue\n     */\n    #isValueGreaterOrEqualsThan = (valueToBeTested, minValue) => {\n        try {\n            let outcome = false;\n            if(valueToBeTested && minValue) {\n                const floatValueToBeTested = parseFloat(valueToBeTested);\n                const floatMinValue = parseFloat(minValue);\n                outcome = floatValueToBeTested >= floatMinValue;\n            }\n            return outcome;\n        }catch(e) {\n            log.error(e);\n            return false;\n        }\n\n    };\n\n    /**\n     * il numero di caratteri del field.\n     * i parametri (almeno uno deve essere obbligatorio) sono:\n     * 1- numero esatto di caratteri permessi. Se questo parametro è pieno, non si considerano gli altri 2 parametri\n     * 2- minimo numero di caratteri permessi\n     * 3- massimo numero di caratteri permessi\n     *\n     * @param {string|number} fieldValue\n     * @param {Array.<string>} params\n     */\n    #validateNumberOfChars = (fieldValue, params = []) => {\n        let outcome = false;\n\n        if(params.length === 0) {\n            return false;\n        }\n\n        if(fieldValue) {\n            const exactNumberOfChars = params[0];\n            const minNumberOfCharsPermitted = params[1];\n            const maxNumberOfCharsPermitted = params[2];\n\n            if(exactNumberOfChars) {\n                return this.#isValueEqualsThan(fieldValue.length, exactNumberOfChars)\n            }\n\n            let greaterOrLowerCondition = null;\n            if(minNumberOfCharsPermitted) {\n                greaterOrLowerCondition = this.#isValueGreaterOrEqualsThan(fieldValue.length, minNumberOfCharsPermitted);\n            }\n            if(greaterOrLowerCondition === false) {\n                return false;\n            }\n\n            if(maxNumberOfCharsPermitted) {\n                greaterOrLowerCondition = this.#isValueLowerOrEqualThan(fieldValue.length, maxNumberOfCharsPermitted);\n            }\n            if(greaterOrLowerCondition === null || greaterOrLowerCondition === true) {\n                outcome = true;\n            }\n        }\n\n        return outcome;\n    };\n\n    /**\n     *\n     * @param {string|number} valueToBeTested\n     * @param {string|number} maxValue\n     */\n    #isValueLowerOrEqualThan = (valueToBeTested, maxValue) => {\n        try {\n            let outcome = false;\n            if(valueToBeTested && maxValue) {\n                const floatValueToBeTested = parseFloat(valueToBeTested);\n                const floatMaxValue = parseFloat(maxValue);\n                outcome = floatValueToBeTested <= floatMaxValue;\n            }\n            return outcome;\n        }catch(e) {\n            log.error(e);\n            return false;\n        }\n\n    };\n}\n","import FieldValidatorManager from \"./field.validator.manager\";\nexport default class FormValidator {\n    #validationFunctions;\n    #manager;\n    constructor() {\n        this.#manager = new FieldValidatorManager();\n        this.#validationFunctions = {\n            1: this.#manager.validateRequired,\n            2: this.#manager.validateAlpha,\n            3: this.#manager.validateNumber,\n            4: this.#manager.validatePrice,\n            5: this.#manager.validateDate,\n            6: this.#manager.validateEmail,\n        }\n\n    }\n\n    /**\n     *\n     * @param {Array.<Field>} fields\n     * @returns {null}\n     */\n    validateAllFields = (fields) => {\n        try {\n            if(fields && fields.length > 0) {\n                for(let field of fields) {\n                    field = this.validateField(field);\n                }\n            }\n            return fields;\n        }catch (e) {\n            log.error(e);\n            return null;\n        }\n    };\n\n    /**\n     *\n     * @param {Field} field\n     * @returns {Field}\n     */\n    validateField = (field) => {\n        try {\n            if(field) {\n                if(field.validations && field.validations.length > 0) {\n                    let validations = field.validations;\n                    let validValidationCounter = 0;\n                    for(let validation of validations) {\n                        if(validation != null) {\n                            const validationFunction = this.#validationFunctions[validation.id];\n                            var isOk = validationFunction(field.value, validation.params);\n                            if(isOk) {\n                                validation.isValid = true;\n                                validValidationCounter++;\n                            }\n                        }\n                    }\n                    if(field.validations.length === validValidationCounter) {\n                        field.isValid = true;\n                    }\n                }\n                else {\n                    field.isValid = true;\n                }\n            }\n            return field;\n        }catch (e) {\n            log.error(e);\n            field.isValid = false;\n            return field;\n        }\n    };\n}\n","import CaptchaView from './captcha.view';\n\nexport default class Captcha {\n    #view;\n    #isReady;\n    #didWaitOnce;\n\n    constructor() {\n        this.#view = new CaptchaView();\n        this.#isReady = false;\n        this.#didWaitOnce = false;\n\n        if (typeof grecaptcha !== 'undefined') {\n            grecaptcha.ready(() => {\n                this.#isReady = true;\n            });\n        }\n    }\n\n    isEnabled = (formId) => {\n        return this.#view.isCaptchaEnabled(formId);\n    };\n\n    executeCaptcha = async (formId) => {\n        try {\n            if (this.#isReady) {\n                return await this.#executeRecaptcha(formId);\n            }\n            else {\n                if (!this.#didWaitOnce) {\n                    this.#didWaitOnce = true;\n                    return setTimeout(() => {\n                        return this.#executeRecaptcha(formId);\n                    }, 5000);\n                }\n            }\n        }catch (e) {\n            log.error(e);\n            return false;\n        }\n\n    };\n\n    #executeRecaptcha = async (formId) => {\n        try {\n            const key = this.#view.getKey(formId);\n            const token = await grecaptcha.execute(key, {action: formId});\n            this.#view.addTokenToCaptchaInput(formId, token);\n            return true;\n        }catch (e) {\n            log.error(e);\n            return false;\n        }\n\n    }\n\n\n\n\n};\n","import Wysiwyg from \"./wysiwyg\";\nimport FormValidator from \"./form.validator\";\nimport FormView from \"./form.view\";\nimport Captcha from \"./captcha/captcha\";\n\n\nexport default class Form {\n    #formValidator;\n    #view;\n    #captcha;\n    constructor() {\n        this.#view = new FormView();\n        new Wysiwyg();\n        this. #captcha = new Captcha();\n        this.#formValidator = new FormValidator();\n\n        this.#view.onFormSubmit(async (formId) => {\n            try {\n                this.#view.resetFormErrors();\n                this.#view.setFormInLoadingMode(formId);\n                let isValid = this.#validateForm(formId);\n                if(!isValid) {\n                    this.#view.setFormInEditMode(formId);\n                }\n                else {\n                    if(this.#captcha.isEnabled(formId)) {\n                        isValid = await this.#captcha.executeCaptcha(formId);\n                        if(!isValid) {\n                            this.#view.showGenericFormError();\n                        }\n                    }\n                }\n                if(isValid) {\n                    this.#view.continueFormSubmit(formId);\n                }\n                else {\n                    this.#view.setFormInEditMode(formId);\n                }\n            }catch(e) {\n                log.error(e);\n                this.#view.setFormInEditMode(formId);\n                return true;\n            }\n\n        });\n\n        this.#view.onFieldFocus(this.#view.resetFieldErrors);\n        this.#view.onFieldFocusOut((formId, fieldName) => {\n            this.#view.resetFormErrors();\n            this.#validateField(formId, fieldName)\n        });\n    }\n\n    /**\n     * @param {string} formId\n     * @param {string} fieldName\n     * @returns {boolean}\n     */\n    #validateField = (formId, fieldName) => {\n        try {\n            let field = this.#view.getFieldWithHisValidations(formId, fieldName);\n            field = this.#formValidator.validateField(field);\n\n            if(field == null || !field.isValid) {\n                this.#view.showErrorOnFormField(formId, field);\n                return false;\n            }\n            return true;\n        }catch (e) {\n            log.error(e);\n            return false;\n        }\n    };\n\n    /**\n     * @param {string} formId\n     * @returns {boolean}\n     */\n    #validateForm = (formId) => {\n        try {\n            let fields = this.#view.getAllFieldsWithTheirValidations(formId);\n            fields = this.#formValidator.validateAllFields(fields);\n            let invalidFields = this.#getAllInvalidFields(fields);\n            if(invalidFields && invalidFields.length > 0) {\n                this.#view.showErrorsOnFormFields(formId, invalidFields);\n                return false;\n            }\n            return true;\n        }catch (e) {\n            log.error(e);\n            return false;\n        }\n    };\n\n    /**\n     * @param {Array.<Field>} fields\n     * @returns {Array.<Field>} fields\n     */\n    #getAllInvalidFields = (fields) => {\n        let outcome = [];\n\n        if(fields && fields.length > 0) {\n            outcome = fields.filter(field => field.isValid === false);\n        }\n        return outcome;\n    };\n\n}\n","import PageFactory from './pages/page.factory';\nimport LazyFactory from './custom/scriptsLazy/lazy.factory';\nimport ImagesLazy from './custom/imagesLazy/images.lazy';\nimport Notifications from \"./custom/httpMessages/notifications\";\nimport Header from \"./viewComponents/header/header\";\n\n$(function () {\n    let lazyFactory = new LazyFactory();\n    lazyFactory.loadLazyScripts();\n    log.bindWindowError();\n    let pageFactory = new PageFactory();\n    pageFactory.bindCurrentPageModule();\n    let imagesLoading = new ImagesLazy();\n    imagesLoading.loadAllLazyImagesIntoThePage();\n    new Notifications();\n    new Header();\n\n});\n","import Page from \"../page\";\nimport Form from \"../../custom/form/form\";\n\nexport default class PageAuthRegister extends Page {\n    constructor() {\n        super();\n        new Form();\n    }\n};\n","export default class ImagesService {\n\n    constructor() {\n    }\n\n    /**\n     * @param file: a File() object\n     * @returns {boolean}\n     */\n    isAnImageFileType(file) {\n        var outcome = false;\n        if (file) {\n            var imageType = /^image\\//;\n            outcome = imageType.test(file.type);\n        }\n        return outcome;\n    }\n\n    createThumbnailFromFile = async (file) => {\n        return await this.#loadImageFromFile(file);\n    };\n\n    /**\n     * @param file: a File() object\n     */\n    #loadImageFromFile = async (file) => {\n        return new Promise(resolve => {\n            if (file) {\n                var reader = new FileReader();\n                reader.onload = function (e) {\n                    var imageObject = new Image();\n                    imageObject.src = e.target.result;\n                    imageObject.onload = function () {\n                        resolve(this);\n                    }\n                };\n                reader.readAsDataURL(file);\n            }\n        });\n    };\n}\n\n\n","import ApiService from '../api/api.service';\n\nexport default class ImagesApi {\n\n    constructor(uploadUrl) {\n        this.uploadUrl = uploadUrl;\n        this.api = new ApiService();\n    }\n\n    /**\n     * upload a file on server with a given url\n     * @returns {*}\n     */\n    uploadImageToGivenUrl = async (givenUrl, file, uploadProgressFunction) => {\n        let body = new FormData();\n        body.append('uploaded_file', file);\n        return await this.api.ajaxPostFileFormData(givenUrl, body, uploadProgressFunction);\n    };\n\n    /**\n     * delete a file by id\n     * @param {int} imageId\n     * @returns {*}\n     */\n    deleteImageById = async (imageId) => {\n        const url = this.uploadUrl + \"/\" + imageId;\n        return await this.api.ajaxDelete(url);\n    };\n\n    /**\n     * enable or disable the image small view by id\n     * @param {int} imageId\n     * @param {bool} isActive\n     * @returns {*}\n     */\n    changeImageSmallViewById = async (imageId, isActive = true) => {\n        const url = this.uploadUrl + \"/\" + imageId+ \"/small-view\";\n        const body = {\n            'is-active': isActive\n        };\n        return await this.api.ajaxPost(url, body);\n    };\n}\n\n\n","import ImagesUploaderView from './images.uploader.view'\nimport ImagesService from './images.service'\nimport ImagesApi from './images.api'\nimport ImageUploaderError from './images.uploader.errors'\n\nexport default class ImagesUploader {\n    constructor() {\n        this.view = new ImagesUploaderView();\n\n        this.config = this.view.getConfigurationFromHtml();\n\n        this.api = new ImagesApi(this.config.uploadUrl);\n        this.service = new ImagesService();\n\n        this.imagesToBeUploaded = [];\n        this.isUploading = false;\n\n        this.view.onSelectFiles(async (files) => {\n            this.view.resetAll();\n            await this.#startUploadImages(files)\n        });\n        this.view.onDropFiles(async (files) => {\n            this.view.resetAll();\n            await this.#startUploadImages(files)\n        });\n        this.view.onDeleteFile(async (imageId) => {\n            this.view.resetAll();\n            this.view.showDeleteConfirmButton(imageId)\n        });\n        this.view.onDeleteFileConfirm(async (imageId) => {\n            await this.#performDeleting(imageId)\n        });\n        this.view.onImageSmallViewButtonClick(async (imageId, isSmallViewActive) => {\n            if(isSmallViewActive) {\n                await this.#disableImageSmallView(imageId);\n            }\n            else {\n                await this.#enableImageSmallView(imageId);\n            }\n        });\n    }\n\n    #performDeleting = async (imageId) => {\n        this.view.hideThumbnail(imageId);\n        this.view.resetAll();\n        let response = await this.api.deleteImageById(imageId);\n        if (!response.hasErrors) {\n            this.view.deleteThumbnail(imageId);\n        }\n        else {\n            this.view.showThumbnail(imageId);\n        }\n    };\n\n    #startUploadImages = async (files) => {\n        if(files && files.length) {\n            for(const file of files) {\n                await this.#startUploadImage(file);\n            }\n        }\n    };\n\n    #startUploadImage = async (file) => {\n        if (this.#canUploadImage(file)) {\n            this.imagesToBeUploaded.push(file);\n            await this.#uploadImagesFromList();\n\n        } else {\n            this.#showImpossibleUploadErrors(file);\n        }\n    };\n\n    #canUploadImage = (file) => {\n        let errorList = this.#calculateImpossibleFileUploadErrorList(file);\n        return errorList == null || errorList.length === 0;\n    };\n\n    #showImpossibleUploadErrors = (file) => {\n        let errors = this.#calculateImpossibleFileUploadErrorList(file);\n        this.#manageAndPrintErrors(errors);\n    };\n\n    #calculateImpossibleFileUploadErrorList(file) {\n        let outcome = [];\n        if (this.#isMaxUploadedFileReached()) {\n            outcome.push(ImageUploaderError.MAX_UPLOAD_FILE_REACHED);\n        }\n        if (!this.service.isAnImageFileType(file)) {\n            outcome.push(ImageUploaderError.NO_VALID_IMAGE);\n        }\n        return outcome;\n    }\n\n    #isMaxUploadedFileReached = () => {\n        let outcome = true;\n        if (this.config.maxNumberOfFiles > 0) {\n            var uploadedImagesNumber = this.view.getNumberOfUploadedImages();\n            outcome = uploadedImagesNumber >= this.config.maxNumberOfFiles;\n        }\n\n        return outcome;\n    };\n\n    #uploadImagesFromList = async () => {\n        if (!this.isUploading && this.imagesToBeUploaded.length > 0) {\n            this.isUploading = true;\n            let file = this.imagesToBeUploaded.shift();\n            await this.#uploadImage(file);\n        }\n    };\n\n    #uploadImage = async (fileToBeUploaded) => {\n        let $thumbnail = await this.#createAndShowThumbnailWithProgressBar(fileToBeUploaded);\n\n        var uploadProgressFunction = (percentCompleted) => {\n            this.view.updateThumbnailPercent($thumbnail, percentCompleted)\n        };\n\n        let response = await this.api.uploadImageToGivenUrl(this.config.uploadUrl, fileToBeUploaded, uploadProgressFunction);\n        if (response && response.params && response.params.imageId) {\n            this.view.updateThumbnailOk($thumbnail, response.params.imageId);\n        } else {\n            this.view.updateThumbnailError($thumbnail);\n        }\n        this.isUploading = false;\n        this.#uploadImagesFromList();\n\n    };\n\n    #createAndShowThumbnailWithProgressBar  = async (file) => {\n        let thumbnail = await this.service.createThumbnailFromFile(file);\n        return this.view.appendThumbnail(thumbnail);\n    };\n\n    #manageAndPrintErrors = (errors) => {\n        if (errors) {\n            for (const error of errors) {\n                this.view.printErrorToUser(error);\n            }\n        }\n    };\n\n    #enableImageSmallView = async (imageId) => {\n        this.view.enableImageSmallView(imageId);\n        let response = await this.api.changeImageSmallViewById(imageId, true);\n        if (response.hasErrors) {\n            this.view.disableImageSmallView(imageId);\n        }\n    };\n\n    #disableImageSmallView = async (imageId) => {\n        this.view.disableImageSmallView(imageId);\n        let response = await this.api.changeImageSmallViewById(imageId, false);\n        if (response.hasErrors) {\n            this.view.enableImageSmallView(imageId);\n        }\n    };\n\n}\n\n\n","import Page from '../../page';\nimport ImagesUploader from '../../../custom/imagesUploader/images.uploader'\nimport Sorting from \"../../../custom/sorting/sorting\";\nimport ApiService from \"../../../custom/api/api.service\";\n\nexport default class PageAuthProjectImages extends Page {\n    #api;\n    constructor() {\n        super();\n        this.#api = new ApiService();\n        new ImagesUploader();\n\n        new Sorting({\n            onUpdate: (updateImagesSortUrl, imagesOrderedIds) => this.#onUpdate(updateImagesSortUrl, imagesOrderedIds)\n        });\n    }\n\n    #onUpdate = (updateImagesSortUrl, imagesOrderedIds) => {\n        const data = {\n          'images-ids' : imagesOrderedIds\n        };\n        this.#api.ajaxPost(updateImagesSortUrl, data);\n    };\n};\n","export default class CategorySelectionView {\n    constructor() {\n        //Texts\n        this.tclick = \"click\";\n\n        //classes\n        this.activeClass = \"active\";\n\n        //Selectors\n        this.dataCategoryIdSelector = 'c';\n        this.categorySelector = \".jcl\";\n        this.categoryBoxSelector = \".jcb\";\n\n        //Wrappers\n        this.$categories = $(this.categorySelector);\n        this.$categoryBoxes = $(this.categoryBoxSelector);\n\n    }\n\n    //#region Public functions\n    onSelectCategory(callback) {\n        this.$categories.off(this.tclick).on(this.tclick, (category) => {\n            let $clickedCategory = $(category.currentTarget);\n            this.selectCategoryFromWrapper($clickedCategory);\n            let categoryId = this.getCategoryIdFromWrapper($clickedCategory);\n            callback(categoryId);\n            return false;\n        })\n    }\n\n    showAllBoxes() {\n        this.$categoryBoxes.show();\n    }\n\n    showOnlyBoxesOfCategory(categoryId) {\n        let $filteredBoxes = this.$categoryBoxes.filter((index, element) => {\n            const $categoryBox = $(element);\n            const categoryBoxId = this.getCategoryIdFromWrapper($categoryBox);\n            return categoryBoxId === categoryId;\n        });\n        this.$categoryBoxes.hide();\n        $filteredBoxes.show();\n    }\n\n    //#endregion Public functions\n\n    //#region Private functions\n    selectCategoryFromWrapper($categoryWrapper) {\n        this.$categories.removeClass(this.activeClass);\n        $categoryWrapper.addClass(this.activeClass);\n    }\n\n    getCategoryIdFromWrapper($categoryWrapper) {\n        return $categoryWrapper.data(this.dataCategoryIdSelector);\n    }\n    //#endregion Private functions\n\n\n\n};\n","import Page from '../../page';\nimport Form from \"../../../custom/form/form\";\n\nexport default class PageAuthProjectEdit extends Page {\n    constructor() {\n        super();\n        new Form();\n    }\n};\n","import {tns} from 'tiny-slider/src/tiny-slider';\nexport default class CroFullScreenImagesCarousel {\n    constructor(customOptions = {}) {\n\n        let defaultOptions = {\n            container: '.cro-fs-images-carousel',\n            items: 1,\n            slideBy: 'page',\n            controls: false,\n            nav: false,\n            autoplayButtonOutput: false,\n            autoplay: true,\n            mouseDrag: true,\n            autoplayTimeout: 5000,\n            autoplayHoverPause: false,\n            lazyload: true,\n        };\n\n        let mergedOptions = {...defaultOptions, ...customOptions };\n\n        var slider = tns(mergedOptions);\n    }\n\n}\n","import CroFullScreenImagesCarousel from \"../custom/cro-fs-images-carousel/cro.fs.images.carousel\";\n\nexport default class PageHome {\n    constructor() {\n        new CroFullScreenImagesCarousel();\n    }\n};\n","require('./bootstrap');\n\nimport './ready'\n","import Page from '../../page';\nimport Crud from \"../../../custom/crud/crud\";\n\nexport default class PageAuthProjectsIndex extends Page {\n    constructor() {\n        super();\n        new Crud();\n    }\n};\n","import Form from \"../custom/form/form\";\n\nexport default class PageContact {\n    constructor() {\n        new Form()\n    }\n};\n","export default class LazyFactory {\n    constructor() {\n        this.clientServerSelector = \"#cl-srv\";\n    }\n\n    loadLazyScripts() {\n        let clSrvConfig = this.getClientServerConfig();\n        if (clSrvConfig) {\n            this.lazyJS(clSrvConfig.lazyJs);\n        }\n    }\n\n    getClientServerConfig() {\n        let clSrvConfig = $(this.clientServerSelector);\n        if (clSrvConfig) {\n            return {\n                lazyJs: clSrvConfig.data(\"lj\")\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    lazyJS(url) {\n        if (url) {\n            let script = document.createElement('script');\n            script.src = url;\n            document.getElementsByTagName('head')[0].appendChild(script);\n        }\n    }\n\n\n}","import Page from \"../page\";\nimport Form from \"../../custom/form/form\";\n\nexport default class PageAuthResetPassword extends Page {\n    constructor() {\n        super();\n        new Form();\n    }\n};\n","import CategorySelectionView from './category.selection.view';\n\nexport default class CategorySelection {\n    constructor() {\n        this.SHOW_ALL_CATEGORIES_ID = 0;\n        this.view = new CategorySelectionView();\n\n        this.view.onSelectCategory((categoryId) => {\n            if (this.doesShowAllCategories(categoryId)) {\n                this.view.showAllBoxes();\n            }\n            else {\n                this.view.showOnlyBoxesOfCategory(categoryId);\n            }\n        })\n    }\n\n    doesShowAllCategories(categoryId) {\n        return categoryId === this.SHOW_ALL_CATEGORIES_ID;\n    }\n\n}\n","import CategorySelection from \"../categories/category.selection\";\n\nexport default class PageProjects {\n    constructor() {\n        new CategorySelection()\n    }\n};\n","export default class ApiService {\n    constructor() {\n    }\n\n    ajaxGet = async (url) => {\n        try {\n            let response = await axios.get(url);\n            return this.#handleResponse(response);\n        } catch (e) {\n            log.error(e);\n            return this.#handleResponse();\n        }\n    };\n\n    ajaxPost = async (url, body = {}) => {\n        try {\n            let response = await axios.post(url, body);\n            return this.#handleResponse(response);\n        } catch (e) {\n            log.error(e);\n            return this.#handleResponse();\n        }\n    };\n\n    ajaxDelete = async (url) => {\n        try {\n            let response = await axios.delete(url);\n            return this.#handleResponse(response);\n\n        } catch (e) {\n            log.error(e);\n            return this.#handleResponse();\n        }\n    };\n\n    ajaxPostFileFormData = async (url, body, uploadProgressFunction) => {\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                },\n                onUploadProgress: (progressEvent) => {\n                    var percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                    uploadProgressFunction(percentCompleted)\n                }\n            };\n            let response = await axios.post(url, body, config);\n            return this.#handleResponse(response)\n        } catch (e) {\n            log.error(e);\n            return this.#handleResponse();\n        }\n    };\n\n    /**\n     *\n     * @param response\n     * @returns {{request: *, response: object that contains parameters}}\n     */\n    #handleResponse = (response = null) => {\n        try {\n            let outcome = {\n                hasErrors: true,\n                params: null,\n                errors: null,\n            };\n            if (response != null) {\n                if (!$.trim(response)) {\n                    response = {}\n                }\n                let parsedResponse = JSON.stringify(response);\n                parsedResponse = JSON.parse(parsedResponse);\n                const parsedResponseData = parsedResponse.data;\n                outcome.params = parsedResponseData.params;\n                outcome.hasErrors = parsedResponseData.hasErrors;\n                outcome.errors = parsedResponseData.errors;\n            }\n            if (response == null || response.status !== 200) {\n                outcome.hasErrors = true\n            }\n            return outcome;\n        } catch (e) {\n            log.error(e);\n            return {\n                hasErrors: true,\n                params: null,\n                errors: null,\n            };\n        }\n\n    };\n}\n\n","export default {\n    MAX_UPLOAD_FILE_REACHED: 1,\n    NO_VALID_IMAGE: 2,\n};\n\n\n\n\n","export default class CrudView {\n    #itemsContainerSelector;\n    #itemSelector;\n    #deleteSelector;\n    #deleteConfirmSelector;\n    constructor() {\n        //Classes\n        this.noneClass = \"none\";\n\n        //Selectors\n        this.#itemsContainerSelector = \".jitemsContainer\";\n        this.#itemSelector = \".jitem\";\n        this.#deleteSelector = \".jdel\";\n        this.#deleteConfirmSelector = \".jdelConfirm\";\n\n        this.$itemsContainer = $(this.#itemsContainerSelector);\n    }\n\n    /**\n     * @param {function} callback\n     */\n    onDeleteClick = (callback) => {\n        this.$itemsContainer.on('click', this.#deleteSelector, (element) => {\n            const $deleteButton = $(element.currentTarget);\n            let itemId = $deleteButton.data(\"id\");\n            callback(itemId);\n            return false;\n        });\n    };\n\n    resetAllDeleteButtons = () => {\n        $(this.#deleteSelector).removeClass(this.noneClass);\n        $(this.#deleteConfirmSelector).addClass(this.noneClass);\n    };\n\n    /**\n     * @param {int} itemId\n     */\n    showDeleteConfirmButton = (itemId) => {\n        const $item = this.#findItemByItemId(itemId);\n        $item.find(this.#deleteSelector).addClass(this.noneClass);\n        $item.find(this.#deleteConfirmSelector).removeClass(this.noneClass);\n    };\n\n    #findItemByItemId = (itemId) => {\n        return this.$itemsContainer.find(this.#itemSelector + '[data-id=\"' + itemId + '\"]');\n    };\n}\n","import Page from \"../page\";\nimport Form from \"../../custom/form/form\";\n\nexport default class PageAuthForgotPassword extends Page {\n    constructor() {\n        super();\n        new Form();\n    }\n};\n","\nexport default class HeaderView {\n\n    constructor() {\n        //Texts\n        this.tclick = 'click';\n        this.topen = 'open';\n        this.tclosed = 'closed';\n        this.ticon = 'i';\n\n        //Selectors\n        this.headerSelector = '.jheader';\n        this.burgerButtonSelector = '.jburgerBtn';\n        this.navMenuSelector = '.jnavContainer';\n\n        this.dropdownButtonSelector = '.jdropdownButton';\n        this.dropdownContentSelector = \".jdropdownListContainer\";\n\n        //DOM\n        this.$header = $(this.headerSelector);\n        this.$burgerButton = this.$header.find(this.burgerButtonSelector);\n        this.$navMenu = this.$header.find(this.navMenuSelector);\n\n        this.$dropdownButtons = this.$header.find(this.dropdownButtonSelector);\n\n    }\n\n    onBurgerButtonClick = (callback) => {\n        this.$burgerButton.off(this.tclick).on(this.tclick, (e) =>{\n            callback();\n            return false;\n        });\n    };\n\n    isNavMenuOpened = () => {\n        return this.$navMenu.hasClass(this.topen);\n    };\n\n    closeNavMenu = () => {\n        this.$navMenu.width('0');\n        this.$navMenu.removeClass(this.topen);\n        this.#setBurgerButtonMenuClosedIcon();\n    };\n\n    openNavMenu = () => {\n        this.$navMenu.width('100%');\n        this.$navMenu.addClass(this.topen);\n        this.#setBurgerButtonMenuOpenIcon();\n    };\n\n    onDropDownButtonClick = (callback) => {\n        this.$dropdownButtons.off(this.tclick).on(this.tclick, (e) =>{\n            const dropdownButtonSelector = e.currentTarget;\n            callback(dropdownButtonSelector);\n            return false;\n        });\n    };\n\n    isDropDownButtonOpened = (dropdownButtonSelector) => {\n        const $dropdownContent = $(dropdownButtonSelector).next(this.dropdownContentSelector);\n        return $dropdownContent.hasClass(this.topen);\n    };\n\n    closeDropDownMenu = (dropdownButtonSelector) => {\n        const $dropdownContent = $(dropdownButtonSelector).next(this.dropdownContentSelector);\n        $dropdownContent.hide();\n        $dropdownContent.removeClass(this.topen);\n        this.#setDropdownClosedIcon(dropdownButtonSelector);\n    };\n\n    openDropDownMenu = (dropdownButtonSelector) => {\n        const $dropdownContent = $(dropdownButtonSelector).next(this.dropdownContentSelector);\n        $dropdownContent.show();\n        $dropdownContent.addClass(this.topen);\n        this.#setDropdownOpenIcon(dropdownButtonSelector);\n    };\n\n    #setBurgerButtonMenuClosedIcon() {\n        const $icon = this.$burgerButton.find(this.ticon);\n        $icon.removeClass($icon.data(this.topen));\n        $icon.addClass($icon.data(this.tclosed));\n    }\n\n    #setBurgerButtonMenuOpenIcon() {\n        const $icon = this.$burgerButton.find(this.ticon);\n        $icon.removeClass($icon.data(this.tclosed));\n        $icon.addClass($icon.data(this.topen));\n    }\n\n    #setDropdownClosedIcon(dropdownButtonSelector) {\n        const $dropdownButton = $(dropdownButtonSelector);\n        const $icon = $dropdownButton.find(this.ticon);\n        $icon.removeClass($icon.data(this.topen));\n        $icon.addClass($icon.data(this.tclosed));\n    }\n\n    #setDropdownOpenIcon(dropdownButtonSelector) {\n        const $dropdownButton = $(dropdownButtonSelector);\n        const $icon = $dropdownButton.find(this.ticon);\n        $icon.removeClass($icon.data(this.tclosed));\n        $icon.addClass($icon.data(this.topen));\n    }\n\n\n}\n","import Page from '../../page';\nimport Crud from \"../../../custom/crud/crud\";\n\nexport default class PageAuthCategoriesIndex extends Page {\n    constructor() {\n        super();\n        new Crud();\n    }\n};\n","import HeaderView from \"./header.view\";\n\nexport default class Header {\n    #view;\n    constructor() {\n\n        this.#view = new HeaderView();\n\n        this.#view.onBurgerButtonClick(() => {\n            if(this.#view.isNavMenuOpened()) {\n                this.#view.closeNavMenu();\n            }\n            else {\n                this.#view.openNavMenu();\n            }\n        });\n\n        this.#view.onDropDownButtonClick((dropdownButtonSelector) => {\n            if(this.#view.isDropDownButtonOpened(dropdownButtonSelector)) {\n                this.#view.closeDropDownMenu(dropdownButtonSelector);\n            }\n            else {\n                this.#view.openDropDownMenu(dropdownButtonSelector);\n            }\n        });\n    }\n}\n","import Page from \"../page\";\nimport Form from \"../../custom/form/form\";\n\nexport default class PageAuthLogin extends Page {\n    constructor() {\n        super();\n        new Form();\n    }\n};\n","import SortingView from './sorting.view';\nimport Sortable from 'sortablejs';\n\nexport default class Sorting {\n    #view;\n    #options;\n    constructor(options) {\n        this.#options = options;\n        this.#view = new SortingView();\n        this.#setupSortableList();\n    }\n\n    #setupSortableList = () => {\n        const $sortableListContainer = this.#view.getSortableListContainer();\n        new Sortable($sortableListContainer, {\n            handle: this.#view.getSortableHandle(),\n            animation: 150,\n            ghostClass: 'blue-background-class',\n            onUpdate: () => this.#calculateNewIdOrder()\n        });\n    };\n\n    #calculateNewIdOrder() {\n        const orderedIdList = this.#view.getNewListOfSortedId();\n        const updateUrl = this.#view.getUpdateUrl();\n\n        this.#options.onUpdate(updateUrl, orderedIdList);\n    }\n\n}\n","import Page from '../../page';\nimport Sorting from '../../../custom/sorting/sorting'\nimport ApiService from \"../../../custom/api/api.service\";\n\nexport default class PageAuthProjectsSort extends Page {\n    #api;\n    constructor() {\n        super();\n        this.api = new ApiService();\n        new Sorting({\n            onUpdate: (updateUrl, orderedIds) => this.#onUpdate(updateUrl, orderedIds)\n\n        });\n    }\n\n    #onUpdate(updateUrl, orderedIds) {\n        console.log(orderedIds);\n        this.api.ajaxPost(updateUrl, orderedIds)\n    }\n};\n"],"sourceRoot":""}